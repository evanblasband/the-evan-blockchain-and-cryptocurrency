from flask import jsonify

from backend.blockchain.blockchain import Blockchain
from backend.wallet.transaction import Transaction


class TransactionPool:
    """
    Class for getting all transactions together in order to be included in
    the blockchain
    """

    def __init__(
        self,
    ):
        """Constructor for TransactionPool"""
        self.transaction_map = {}

    def set_transaction(self, transaction: Transaction) -> None:
        """
        Adding a transaction to the transaction pool
        :param transaction: the transaction to be set
        :return:
        """
        self.transaction_map[transaction.id] = transaction

    def existing_transaction(self, address: str) -> Transaction:
        """
        find a transaction generated by the given address
        :param address: the address to check if a transaction already
        exists for
        :return:
        """
        for transaction in self.transaction_map.values():
            if transaction.input["address"] == address:
                return transaction

    def transaction_data(self) -> []:
        """
        Get the transactions in the transaction pool in their json form
        :return: a List of maps containing the json representation of each
        transaction in the transaction pool
        """
        return list(
            map(
                lambda transaction: transaction.to_json(), self.transaction_map.values()
            )
        )

    def clear_blockchain_transaction(self, blockchain: Blockchain):
        """
        Clears transactions from the transaction pool if they have been
        recorded in the blockchain
        :param blockchain: the blockchain to check if transactions have been recorded
        :return:
        """
        for block in blockchain.chain:
            for transaction in block.data:
                try:
                    del self.transaction_map[transaction["id"]]
                except KeyError:
                    pass
